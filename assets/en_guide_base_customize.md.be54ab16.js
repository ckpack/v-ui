import{_ as n,c as s,o as a,b as p}from"./app.62e3dfa4.js";const f='{"title":"Custom component prefix","description":"","frontmatter":{},"headers":[{"level":2,"title":"Custom component prefix","slug":"custom-component-prefix"},{"level":2,"title":"Custom class name prefix","slug":"custom-class-name-prefix"}],"relativePath":"en/guide/base/customize.md","lastUpdated":1641984389883}',t={},o=p(`<p>When we use <code>Vue.use</code> to install components, we can set some configuration of the component library through optional parameters.</p><blockquote><p>If we do not import globally, we can set it through the configuration provided by the <code>config-provider</code> component (except for custom component prefixes). Config Provider uses <a href="https://v3.vuejs.org/guide/composition-api-provide-inject.html#reactivity" target="_blank" rel="noopener noreferrer">Vue&#39;s provide/inject feature</a></p></blockquote><h2 id="custom-component-prefix" tabindex="-1">Custom component prefix <a class="header-anchor" href="#custom-component-prefix" aria-hidden="true">#</a></h2><p>In the global introduction, we can solve the problem of component name conflicts by customizing the component prefix.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createApp<span class="token punctuation">}</span> <span class="token keyword">from</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span><span class="token string">&#39;@/App.vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>Button<span class="token punctuation">}</span> <span class="token keyword">from</span><span class="token string">&#39;v-ui&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Button<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">componentPrefix</span><span class="token operator">:</span><span class="token string">&#39;K&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>When more components are introduced, you can use the more convenient <code>create</code> function to create applications.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createApp<span class="token punctuation">}</span> <span class="token keyword">from</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span><span class="token string">&#39;@/App.vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>Button<span class="token punctuation">,</span> Label<span class="token punctuation">,</span> create<span class="token punctuation">}</span> <span class="token keyword">from</span><span class="token string">&#39;v-ui&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Button<span class="token punctuation">,</span> Label<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">componentPrefix</span><span class="token operator">:</span><span class="token string">&#39;K&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Then we can use it in other places like this</p><div class="language-html"><pre><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>k-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handlerClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>k-button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>k-label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>k-label</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="custom-class-name-prefix" tabindex="-1">Custom class name prefix <a class="header-anchor" href="#custom-class-name-prefix" aria-hidden="true">#</a></h2><p>We can solve the problem of project style conflicts by customizing the <code>class</code> prefix.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createApp<span class="token punctuation">}</span> <span class="token keyword">from</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span><span class="token string">&#39;@/App.vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>Button<span class="token punctuation">,</span> create<span class="token punctuation">}</span> <span class="token keyword">from</span><span class="token string">&#39;v-ui&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Button<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">componentPrefix</span><span class="token operator">:</span><span class="token string">&#39;K&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">clsPrefix</span><span class="token operator">:</span><span class="token string">&#39;k-&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Due to the prefix change, you need to directly import and modify the original <code>scss</code> file.</p><div class="language-scss"><pre><code><span class="token keyword">@use</span><span class="token string">&#39;v-ui/src/style/_variables.scss&#39;</span> <span class="token module-modifier keyword">with</span> <span class="token punctuation">(</span>
  <span class="token property"><span class="token variable">$cls-prefix</span></span><span class="token punctuation">:</span><span class="token string">&#39;k-&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">@use</span><span class="token string">&#39;v-ui/src/style/index.scss&#39;</span><span class="token punctuation">;</span>
</code></pre></div>`,14),e=[o];function c(u,l,i,r,k,d){return a(),s("div",null,e)}var g=n(t,[["render",c]]);export{f as __pageData,g as default};
